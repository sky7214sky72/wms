plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.api'
version = '0.0.1-SNAPSHOT'
description = 'wms'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    //== 엔티티 클래스의 Q 클래스 파일을 annotationProcessor를 통해 생성한다 ==//
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    //== Jakarta EE에서 사용되는 표준 애노테이션들에 대한 API 제공 ==//
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    //== JPA 애노테이션 (@Entity, @id, @GeneratedValue 등)을 Jakarta 패키지로 제공하는 역할 ==//
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory.set(querydslDir)
}

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

clean.doLast {
    file(querydslDir).deleteDir()
}

tasks.named('test') {
    useJUnitPlatform()
}
